!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.TComm=t():e.TComm=t()}(global,function(){return function(e){var t={};function s(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,s),r.l=!0,r.exports}return s.m=e,s.c=t,s.d=function(e,t,i){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)s.d(i,r,function(t){return e[t]}.bind(null,r));return i},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=22)}([function(e,t,s){"use strict";e.exports={BINARY_TYPES:["nodebuffer","arraybuffer","fragments"],GUID:"258EAFA5-E914-47DA-95CA-C5AB0DC85B11",kStatusCode:Symbol("status-code"),kWebSocket:Symbol("websocket"),EMPTY_BUFFER:Buffer.alloc(0),NOOP:()=>{}}},function(e,t,s){"use strict";const i=s(17),r=s(16),n=s(2),o=s(0),a=Buffer.from([0,0,255,255]),h=Buffer.from([0]),c=Symbol("permessage-deflate"),l=Symbol("write-in-progress"),f=Symbol("pending-close"),d=Symbol("total-length"),u=Symbol("callback"),_=Symbol("buffers"),p=Symbol("error");let m;function g(e){this[_].push(e),this[d]+=e.length}function v(e){this[d]+=e.length,this[c]._maxPayload<1||this[d]<=this[c]._maxPayload?this[_].push(e):(this[p]=new RangeError("Max payload size exceeded"),this[p][o.kStatusCode]=1009,this.removeListener("data",v),this.reset())}function y(e){this[c]._inflate=null,e[o.kStatusCode]=1007,this[u](e)}e.exports=class{constructor(e,t,s){if(this._maxPayload=0|s,this._options=e||{},this._threshold=void 0!==this._options.threshold?this._options.threshold:1024,this._isServer=!!t,this._deflate=null,this._inflate=null,this.params=null,!m){const e=void 0!==this._options.concurrencyLimit?this._options.concurrencyLimit:10;m=new i({concurrency:e})}}static get extensionName(){return"permessage-deflate"}offer(){const e={};return this._options.serverNoContextTakeover&&(e.server_no_context_takeover=!0),this._options.clientNoContextTakeover&&(e.client_no_context_takeover=!0),this._options.serverMaxWindowBits&&(e.server_max_window_bits=this._options.serverMaxWindowBits),this._options.clientMaxWindowBits?e.client_max_window_bits=this._options.clientMaxWindowBits:null==this._options.clientMaxWindowBits&&(e.client_max_window_bits=!0),e}accept(e){return e=this.normalizeParams(e),this.params=this._isServer?this.acceptAsServer(e):this.acceptAsClient(e),this.params}cleanup(){this._inflate&&(this._inflate[l]?this._inflate[f]=!0:(this._inflate.close(),this._inflate=null)),this._deflate&&(this._deflate[l]?this._deflate[f]=!0:(this._deflate.close(),this._deflate=null))}acceptAsServer(e){const t=this._options,s=e.find(e=>!(!1===t.serverNoContextTakeover&&e.server_no_context_takeover||e.server_max_window_bits&&(!1===t.serverMaxWindowBits||"number"==typeof t.serverMaxWindowBits&&t.serverMaxWindowBits>e.server_max_window_bits)||"number"==typeof t.clientMaxWindowBits&&!e.client_max_window_bits));if(!s)throw new Error("None of the extension offers can be accepted");return t.serverNoContextTakeover&&(s.server_no_context_takeover=!0),t.clientNoContextTakeover&&(s.client_no_context_takeover=!0),"number"==typeof t.serverMaxWindowBits&&(s.server_max_window_bits=t.serverMaxWindowBits),"number"==typeof t.clientMaxWindowBits?s.client_max_window_bits=t.clientMaxWindowBits:!0!==s.client_max_window_bits&&!1!==t.clientMaxWindowBits||delete s.client_max_window_bits,s}acceptAsClient(e){const t=e[0];if(!1===this._options.clientNoContextTakeover&&t.client_no_context_takeover)throw new Error('Unexpected parameter "client_no_context_takeover"');if(t.client_max_window_bits){if(!1===this._options.clientMaxWindowBits||"number"==typeof this._options.clientMaxWindowBits&&t.client_max_window_bits>this._options.clientMaxWindowBits)throw new Error('Unexpected or invalid parameter "client_max_window_bits"')}else"number"==typeof this._options.clientMaxWindowBits&&(t.client_max_window_bits=this._options.clientMaxWindowBits);return t}normalizeParams(e){return e.forEach(e=>{Object.keys(e).forEach(t=>{var s=e[t];if(s.length>1)throw new Error(`Parameter "${t}" must have only a single value`);if(s=s[0],"client_max_window_bits"===t){if(!0!==s){const e=+s;if(!Number.isInteger(e)||e<8||e>15)throw new TypeError(`Invalid value for parameter "${t}": ${s}`);s=e}else if(!this._isServer)throw new TypeError(`Invalid value for parameter "${t}": ${s}`)}else if("server_max_window_bits"===t){const e=+s;if(!Number.isInteger(e)||e<8||e>15)throw new TypeError(`Invalid value for parameter "${t}": ${s}`);s=e}else{if("client_no_context_takeover"!==t&&"server_no_context_takeover"!==t)throw new Error(`Unknown parameter "${t}"`);if(!0!==s)throw new TypeError(`Invalid value for parameter "${t}": ${s}`)}e[t]=s})}),e}decompress(e,t,s){m.push(i=>{this._decompress(e,t,(e,t)=>{i(),s(e,t)})})}compress(e,t,s){m.push(i=>{this._compress(e,t,(e,t)=>{i(),s(e,t)})})}_decompress(e,t,s){const i=this._isServer?"client":"server";if(!this._inflate){const e=`${i}_max_window_bits`,t="number"!=typeof this.params[e]?r.Z_DEFAULT_WINDOWBITS:this.params[e];this._inflate=r.createInflateRaw(Object.assign({},this._options.zlibInflateOptions,{windowBits:t})),this._inflate[c]=this,this._inflate[d]=0,this._inflate[_]=[],this._inflate.on("error",y),this._inflate.on("data",v)}this._inflate[u]=s,this._inflate[l]=!0,this._inflate.write(e),t&&this._inflate.write(a),this._inflate.flush(()=>{const e=this._inflate[p];if(e)return this._inflate.close(),this._inflate=null,void s(e);const r=n.concat(this._inflate[_],this._inflate[d]);t&&this.params[`${i}_no_context_takeover`]||this._inflate[f]?(this._inflate.close(),this._inflate=null):(this._inflate[l]=!1,this._inflate[d]=0,this._inflate[_]=[]),s(null,r)})}_compress(e,t,s){if(!e||0===e.length)return void process.nextTick(s,null,h);const i=this._isServer?"server":"client";if(!this._deflate){const e=`${i}_max_window_bits`,t="number"!=typeof this.params[e]?r.Z_DEFAULT_WINDOWBITS:this.params[e];this._deflate=r.createDeflateRaw(Object.assign({memLevel:this._options.memLevel,level:this._options.level},this._options.zlibDeflateOptions,{windowBits:t})),this._deflate[d]=0,this._deflate[_]=[],this._deflate.on("data",g)}this._deflate[l]=!0,this._deflate.write(e),this._deflate.flush(r.Z_SYNC_FLUSH,()=>{var e=n.concat(this._deflate[_],this._deflate[d]);t&&(e=e.slice(0,e.length-4)),t&&this.params[`${i}_no_context_takeover`]||this._deflate[f]?(this._deflate.close(),this._deflate=null):(this._deflate[l]=!1,this._deflate[d]=0,this._deflate[_]=[]),s(null,e)})}}},function(e,t,s){"use strict";function i(e,t){const s=Buffer.allocUnsafe(t);for(var i=0,r=0;r<e.length;r++){const t=e[r];t.copy(s,i),i+=t.length}return s}function r(e,t,s,i,r){for(var n=0;n<r;n++)s[i+n]=e[n]^t[3&n]}function n(e,t){const s=e.length;for(var i=0;i<s;i++)e[i]^=t[3&i]}try{const t=s(!function(){var e=new Error("Cannot find module 'bufferutil'");throw e.code="MODULE_NOT_FOUND",e}()),o=t.BufferUtil||t;e.exports={mask(e,t,s,i,n){n<48?r(e,t,s,i,n):o.mask(e,t,s,i,n)},unmask(e,t){e.length<32?n(e,t):o.unmask(e,t)},concat:i}}catch(t){e.exports={concat:i,mask:r,unmask:n}}},function(e,t){e.exports=require("crypto")},function(e,t,s){"use strict";const i=s(12);i.Server=s(13),i.Receiver=s(8),i.Sender=s(6),e.exports=i},function(e,t){e.exports=require("events")},function(e,t,s){"use strict";const i=s(3),r=s(1),n=s(2),o=s(7),a=s(0);class h{constructor(e,t){this._extensions=t||{},this._socket=e,this._firstFragment=!0,this._compress=!1,this._bufferedBytes=0,this._deflating=!1,this._queue=[]}static frame(e,t){const s=e.length<1024||t.mask&&t.readOnly;var r=t.mask?6:2,o=e.length;e.length>=65536?(r+=8,o=127):e.length>125&&(r+=2,o=126);const a=Buffer.allocUnsafe(s?e.length+r:r);if(a[0]=t.fin?128|t.opcode:t.opcode,t.rsv1&&(a[0]|=64),126===o?a.writeUInt16BE(e.length,2):127===o&&(a.writeUInt32BE(0,2),a.writeUInt32BE(e.length,6)),!t.mask)return a[1]=o,s?(e.copy(a,r),[a]):[a,e];const h=i.randomBytes(4);return a[1]=128|o,a[r-4]=h[0],a[r-3]=h[1],a[r-2]=h[2],a[r-1]=h[3],s?(n.mask(e,h,a,r,e.length),[a]):(n.mask(e,h,e,0,e.length),[a,e])}close(e,t,s,i){var r;if(void 0===e)r=a.EMPTY_BUFFER;else{if("number"!=typeof e||!o.isValidStatusCode(e))throw new TypeError("First argument must be a valid error code number");void 0===t||""===t?(r=Buffer.allocUnsafe(2)).writeUInt16BE(e,0):((r=Buffer.allocUnsafe(2+Buffer.byteLength(t))).writeUInt16BE(e,0),r.write(t,2))}this._deflating?this.enqueue([this.doClose,r,s,i]):this.doClose(r,s,i)}doClose(e,t,s){this.sendFrame(h.frame(e,{fin:!0,rsv1:!1,opcode:8,mask:t,readOnly:!1}),s)}ping(e,t,s){var i=!0;Buffer.isBuffer(e)||(e instanceof ArrayBuffer?e=Buffer.from(e):ArrayBuffer.isView(e)?e=c(e):(e=Buffer.from(e),i=!1)),this._deflating?this.enqueue([this.doPing,e,t,i,s]):this.doPing(e,t,i,s)}doPing(e,t,s,i){this.sendFrame(h.frame(e,{fin:!0,rsv1:!1,opcode:9,mask:t,readOnly:s}),i)}pong(e,t,s){var i=!0;Buffer.isBuffer(e)||(e instanceof ArrayBuffer?e=Buffer.from(e):ArrayBuffer.isView(e)?e=c(e):(e=Buffer.from(e),i=!1)),this._deflating?this.enqueue([this.doPong,e,t,i,s]):this.doPong(e,t,i,s)}doPong(e,t,s,i){this.sendFrame(h.frame(e,{fin:!0,rsv1:!1,opcode:10,mask:t,readOnly:s}),i)}send(e,t,s){var i=t.binary?2:1,n=t.compress,o=!0;Buffer.isBuffer(e)||(e instanceof ArrayBuffer?e=Buffer.from(e):ArrayBuffer.isView(e)?e=c(e):(e=Buffer.from(e),o=!1));const a=this._extensions[r.extensionName];if(this._firstFragment?(this._firstFragment=!1,n&&a&&(n=e.length>=a._threshold),this._compress=n):(n=!1,i=0),t.fin&&(this._firstFragment=!0),a){const r={fin:t.fin,rsv1:n,opcode:i,mask:t.mask,readOnly:o};this._deflating?this.enqueue([this.dispatch,e,this._compress,r,s]):this.dispatch(e,this._compress,r,s)}else this.sendFrame(h.frame(e,{fin:t.fin,rsv1:!1,opcode:i,mask:t.mask,readOnly:o}),s)}dispatch(e,t,s,i){if(!t)return void this.sendFrame(h.frame(e,s),i);const n=this._extensions[r.extensionName];this._deflating=!0,n.compress(e,s.fin,(e,t)=>{s.readOnly=!1,this.sendFrame(h.frame(t,s),i),this._deflating=!1,this.dequeue()})}dequeue(){for(;!this._deflating&&this._queue.length;){const e=this._queue.shift();this._bufferedBytes-=e[1].length,e[0].apply(this,e.slice(1))}}enqueue(e){this._bufferedBytes+=e[1].length,this._queue.push(e)}sendFrame(e,t){2===e.length?(this._socket.write(e[0]),this._socket.write(e[1],t)):this._socket.write(e[0],t)}}function c(e){const t=Buffer.from(e.buffer);return e.byteLength!==e.buffer.byteLength?t.slice(e.byteOffset,e.byteOffset+e.byteLength):t}e.exports=h},function(e,t,s){"use strict";try{const e=s(!function(){var e=new Error("Cannot find module 'utf-8-validate'");throw e.code="MODULE_NOT_FOUND",e}());t.isValidUTF8="object"==typeof e?e.Validation.isValidUTF8:e}catch(e){t.isValidUTF8=(()=>!0)}t.isValidStatusCode=(e=>e>=1e3&&e<=1013&&1004!==e&&1005!==e&&1006!==e||e>=3e3&&e<=4999)},function(e,t,s){"use strict";const i=s(14),r=s(1),n=s(2),o=s(7),a=s(0),h=0,c=1,l=2,f=3,d=4,u=5;function _(e,t,s,i){const r=new e(s?`Invalid WebSocket frame: ${t}`:t);return Error.captureStackTrace(r,_),r[a.kStatusCode]=i,r}function p(e,t){return 1===e.length?e[0]:e.length>1?n.concat(e,t):a.EMPTY_BUFFER}e.exports=class extends i.Writable{constructor(e,t,s){super(),this._binaryType=e||a.BINARY_TYPES[0],this[a.kWebSocket]=void 0,this._extensions=t||{},this._maxPayload=0|s,this._bufferedBytes=0,this._buffers=[],this._compressed=!1,this._payloadLength=0,this._mask=void 0,this._fragmented=0,this._masked=!1,this._fin=!1,this._opcode=0,this._totalPayloadLength=0,this._messageLength=0,this._fragments=[],this._state=h,this._loop=!1}_write(e,t,s){if(8===this._opcode)return s();this._bufferedBytes+=e.length,this._buffers.push(e),this.startLoop(s)}consume(e){if(this._bufferedBytes-=e,e===this._buffers[0].length)return this._buffers.shift();if(e<this._buffers[0].length){const t=this._buffers[0];return this._buffers[0]=t.slice(e),t.slice(0,e)}const t=Buffer.allocUnsafe(e);do{const s=this._buffers[0];e>=s.length?this._buffers.shift().copy(t,t.length-e):(s.copy(t,t.length-e,0,e),this._buffers[0]=s.slice(e)),e-=s.length}while(e>0);return t}startLoop(e){var t;this._loop=!0;do{switch(this._state){case h:t=this.getInfo();break;case c:t=this.getPayloadLength16();break;case l:t=this.getPayloadLength64();break;case f:this.getMask();break;case d:t=this.getData(e);break;default:return void(this._loop=!1)}}while(this._loop);e(t)}getInfo(){if(this._bufferedBytes<2)return void(this._loop=!1);const e=this.consume(2);if(0!=(48&e[0]))return this._loop=!1,_(RangeError,"RSV2 and RSV3 must be clear",!0,1002);const t=64==(64&e[0]);if(t&&!this._extensions[r.extensionName])return this._loop=!1,_(RangeError,"RSV1 must be clear",!0,1002);if(this._fin=128==(128&e[0]),this._opcode=15&e[0],this._payloadLength=127&e[1],0===this._opcode){if(t)return this._loop=!1,_(RangeError,"RSV1 must be clear",!0,1002);if(!this._fragmented)return this._loop=!1,_(RangeError,"invalid opcode 0",!0,1002);this._opcode=this._fragmented}else if(1===this._opcode||2===this._opcode){if(this._fragmented)return this._loop=!1,_(RangeError,`invalid opcode ${this._opcode}`,!0,1002);this._compressed=t}else{if(!(this._opcode>7&&this._opcode<11))return this._loop=!1,_(RangeError,`invalid opcode ${this._opcode}`,!0,1002);if(!this._fin)return this._loop=!1,_(RangeError,"FIN must be set",!0,1002);if(t)return this._loop=!1,_(RangeError,"RSV1 must be clear",!0,1002);if(this._payloadLength>125)return this._loop=!1,_(RangeError,`invalid payload length ${this._payloadLength}`,!0,1002)}if(this._fin||this._fragmented||(this._fragmented=this._opcode),this._masked=128==(128&e[1]),126===this._payloadLength)this._state=c;else{if(127!==this._payloadLength)return this.haveLength();this._state=l}}getPayloadLength16(){if(!(this._bufferedBytes<2))return this._payloadLength=this.consume(2).readUInt16BE(0),this.haveLength();this._loop=!1}getPayloadLength64(){if(this._bufferedBytes<8)return void(this._loop=!1);const e=this.consume(8),t=e.readUInt32BE(0);return t>Math.pow(2,21)-1?(this._loop=!1,_(RangeError,"Unsupported WebSocket frame: payload length > 2^53 - 1",!1,1009)):(this._payloadLength=t*Math.pow(2,32)+e.readUInt32BE(4),this.haveLength())}haveLength(){if(this._payloadLength&&this._opcode<8&&(this._totalPayloadLength+=this._payloadLength,this._totalPayloadLength>this._maxPayload&&this._maxPayload>0))return this._loop=!1,_(RangeError,"Max payload size exceeded",!1,1009);this._masked?this._state=f:this._state=d}getMask(){this._bufferedBytes<4?this._loop=!1:(this._mask=this.consume(4),this._state=d)}getData(e){var t=a.EMPTY_BUFFER;if(this._payloadLength){if(this._bufferedBytes<this._payloadLength)return void(this._loop=!1);t=this.consume(this._payloadLength),this._masked&&n.unmask(t,this._mask)}return this._opcode>7?this.controlMessage(t):this._compressed?(this._state=u,void this.decompress(t,e)):(t.length&&(this._messageLength=this._totalPayloadLength,this._fragments.push(t)),this.dataMessage())}decompress(e,t){this._extensions[r.extensionName].decompress(e,this._fin,(e,s)=>{if(e)return t(e);if(s.length){if(this._messageLength+=s.length,this._messageLength>this._maxPayload&&this._maxPayload>0)return t(_(RangeError,"Max payload size exceeded",!1,1009));this._fragments.push(s)}const i=this.dataMessage();if(i)return t(i);this.startLoop(t)})}dataMessage(){if(this._fin){const s=this._messageLength,i=this._fragments;if(this._totalPayloadLength=0,this._messageLength=0,this._fragmented=0,this._fragments=[],2===this._opcode){var e;e="nodebuffer"===this._binaryType?p(i,s):"arraybuffer"===this._binaryType?0===(t=p(i,s)).byteOffset&&t.byteLength===t.buffer.byteLength?t.buffer:t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength):i,this.emit("message",e)}else{const e=p(i,s);if(!o.isValidUTF8(e))return this._loop=!1,_(Error,"invalid UTF-8 sequence",!0,1007);this.emit("message",e.toString())}}var t;this._state=h}controlMessage(e){if(8!==this._opcode)9===this._opcode?this.emit("ping",e):this.emit("pong",e),this._state=h;else if(this._loop=!1,0===e.length)this.emit("conclude",1005,""),this.end();else{if(1===e.length)return _(RangeError,"invalid payload length 1",!0,1002);{const t=e.readUInt16BE(0);if(!o.isValidStatusCode(t))return _(RangeError,`invalid status code ${t}`,!0,1002);const s=e.slice(2);if(!o.isValidUTF8(s))return _(Error,"invalid UTF-8 sequence",!0,1007);this.emit("conclude",t,s.toString()),this.end()}}}}},function(e,t,s){"use strict";const i=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,0,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0];function r(e,t,s){Object.prototype.hasOwnProperty.call(e,t)?e[t].push(s):e[t]=[s]}e.exports={format:function(e){return Object.keys(e).map(t=>{var s=e[t];return Array.isArray(s)||(s=[s]),s.map(e=>[t].concat(Object.keys(e).map(t=>{var s=e[t];return Array.isArray(s)||(s=[s]),s.map(e=>!0===e?t:`${t}=${e}`).join("; ")})).join("; ")).join(", ")}).join(", ")},parse:function(e){const t={};if(void 0===e||""===e)return t;for(var s,n,o={},a=!1,h=!1,c=!1,l=-1,f=-1,d=0;d<e.length;d++){const _=e.charCodeAt(d);if(void 0===s)if(-1===f&&1===i[_])-1===l&&(l=d);else if(32===_||9===_)-1===f&&-1!==l&&(f=d);else{if(59!==_&&44!==_)throw new SyntaxError(`Unexpected character at index ${d}`);{if(-1===l)throw new SyntaxError(`Unexpected character at index ${d}`);-1===f&&(f=d);const i=e.slice(l,f);44===_?(r(t,i,o),o={}):s=i,l=f=-1}}else if(void 0===n)if(-1===f&&1===i[_])-1===l&&(l=d);else if(32===_||9===_)-1===f&&-1!==l&&(f=d);else if(59===_||44===_){if(-1===l)throw new SyntaxError(`Unexpected character at index ${d}`);-1===f&&(f=d),r(o,e.slice(l,f),!0),44===_&&(r(t,s,o),o={},s=void 0),l=f=-1}else{if(61!==_||-1===l||-1!==f)throw new SyntaxError(`Unexpected character at index ${d}`);n=e.slice(l,d),l=f=-1}else if(h){if(1!==i[_])throw new SyntaxError(`Unexpected character at index ${d}`);-1===l?l=d:a||(a=!0),h=!1}else if(c)if(1===i[_])-1===l&&(l=d);else if(34===_&&-1!==l)c=!1,f=d;else{if(92!==_)throw new SyntaxError(`Unexpected character at index ${d}`);h=!0}else if(34===_&&61===e.charCodeAt(d-1))c=!0;else if(-1===f&&1===i[_])-1===l&&(l=d);else if(-1===l||32!==_&&9!==_){if(59!==_&&44!==_)throw new SyntaxError(`Unexpected character at index ${d}`);if(-1===l)throw new SyntaxError(`Unexpected character at index ${d}`);-1===f&&(f=d);var u=e.slice(l,f);a&&(u=u.replace(/\\/g,""),a=!1),r(o,n,u),44===_&&(r(t,s,o),o={},s=void 0),n=void 0,l=f=-1}else-1===f&&(f=d)}if(-1===l||c)throw new SyntaxError("Unexpected end of input");-1===f&&(f=d);const _=e.slice(l,f);return void 0===s?r(t,_,{}):(void 0===n?r(o,_,!0):r(o,n,a?_.replace(/\\/g,""):_),r(t,s,o)),t}}},function(e,t){e.exports=require("url")},function(e,t){e.exports=require("http")},function(e,t,s){"use strict";const i=s(5),r=s(3),n=s(20),o=s(11),a=s(19),h=s(18),c=s(10),l=s(1),f=s(15),d=s(9),u=s(0),_=s(8),p=s(6),m=["CONNECTING","OPEN","CLOSING","CLOSED"],g=u.kWebSocket,v=[8,13],y=3e4;class b extends i{constructor(e,t,s){super(),this.readyState=b.CONNECTING,this.protocol="",this._binaryType=u.BINARY_TYPES[0],this._closeFrameReceived=!1,this._closeFrameSent=!1,this._closeMessage="",this._closeTimer=null,this._closeCode=1006,this._extensions={},this._isServer=!0,this._receiver=null,this._sender=null,this._socket=null,null!==e&&(Array.isArray(t)?t=t.join(", "):"object"==typeof t&&null!==t&&(s=t,t=void 0),function(e,t,s){if(s=Object.assign({protocolVersion:v[1],perMessageDeflate:!0},s,{createConnection:void 0,socketPath:void 0,hostname:void 0,protocol:void 0,timeout:void 0,method:void 0,auth:void 0,host:void 0,path:void 0,port:void 0}),-1===v.indexOf(s.protocolVersion))throw new RangeError(`Unsupported protocol version: ${s.protocolVersion} `+`(supported versions: ${v.join(", ")})`);var i;this._isServer=!1,"object"==typeof e&&void 0!==e.href?(i=e,this.url=e.href):(i=c.parse(e),this.url=e);const a="ws+unix:"===i.protocol;if(!(i.host||a&&i.pathname))throw new Error(`Invalid URL: ${this.url}`);const h="wss:"===i.protocol||"https:"===i.protocol,f=r.randomBytes(16).toString("base64"),_=h?n:o,p=i.search?`${i.pathname||"/"}${i.search}`:i.pathname||"/";var m;s.createConnection=h?S:w,s.port=i.port||(h?443:80),s.host=i.hostname.startsWith("[")?i.hostname.slice(1,-1):i.hostname,s.headers=Object.assign({"Sec-WebSocket-Version":s.protocolVersion,"Sec-WebSocket-Key":f,Connection:"Upgrade",Upgrade:"websocket"},s.headers),s.path=p,s.perMessageDeflate&&(m=new l(!0!==s.perMessageDeflate?s.perMessageDeflate:{},!1),s.headers["Sec-WebSocket-Extensions"]=d.format({[l.extensionName]:m.offer()}));t&&(s.headers["Sec-WebSocket-Protocol"]=t);s.origin&&(s.protocolVersion<13?s.headers["Sec-WebSocket-Origin"]=s.origin:s.headers.Origin=s.origin);i.auth?s.auth=i.auth:(i.username||i.password)&&(s.auth=`${i.username}:${i.password}`);if(a){const e=p.split(":");null==s.agent&&process.versions.modules<57?s._socketPath=e[0]:s.socketPath=e[0],s.path=e[1]}var g=this._req=_.get(s);s.handshakeTimeout&&g.setTimeout(s.handshakeTimeout,()=>x(this,g,"Opening handshake has timed out"));g.on("error",e=>{this._req.aborted||(g=this._req=null,this.readyState=b.CLOSING,this.emit("error",e),this.emitClose())}),g.on("response",e=>{this.emit("unexpected-response",g,e)||x(this,g,`Unexpected server response: ${e.statusCode}`)}),g.on("upgrade",(e,s,i)=>{if(this.emit("upgrade",e),this.readyState!==b.CONNECTING)return;g=this._req=null;const n=r.createHash("sha1").update(f+u.GUID,"binary").digest("base64");if(e.headers["sec-websocket-accept"]!==n)return void x(this,s,"Invalid Sec-WebSocket-Accept header");const o=e.headers["sec-websocket-protocol"],a=(t||"").split(/, */);var h;if(!t&&o?h="Server sent a subprotocol but none was requested":t&&!o?h="Server sent no subprotocol":o&&-1===a.indexOf(o)&&(h="Server sent an invalid subprotocol"),h)x(this,s,h);else{if(o&&(this.protocol=o),m)try{const t=d.parse(e.headers["sec-websocket-extensions"]);t[l.extensionName]&&(m.accept(t[l.extensionName]),this._extensions[l.extensionName]=m)}catch(e){return void x(this,s,"Invalid Sec-WebSocket-Extensions header")}this.setSocket(s,i,0)}})}.call(this,e,t,s))}get CONNECTING(){return b.CONNECTING}get CLOSING(){return b.CLOSING}get CLOSED(){return b.CLOSED}get OPEN(){return b.OPEN}get binaryType(){return this._binaryType}set binaryType(e){u.BINARY_TYPES.indexOf(e)<0||(this._binaryType=e,this._receiver&&(this._receiver._binaryType=e))}get bufferedAmount(){return this._socket?(this._socket.bufferSize||0)+this._sender._bufferedBytes:0}get extensions(){return Object.keys(this._extensions).join()}setSocket(e,t,s){const i=new _(this._binaryType,this._extensions,s);this._sender=new p(e,this._extensions),this._receiver=i,this._socket=e,i[g]=this,e[g]=this,i.on("conclude",k),i.on("drain",E),i.on("error",O),i.on("message",L),i.on("ping",T),i.on("pong",B),e.setTimeout(0),e.setNoDelay(),t.length>0&&e.unshift(t),e.on("close",N),e.on("data",P),e.on("end",U),e.on("error",M),this.readyState=b.OPEN,this.emit("open")}emitClose(){this.readyState=b.CLOSED,this._socket?(this._extensions[l.extensionName]&&this._extensions[l.extensionName].cleanup(),this._receiver.removeAllListeners(),this.emit("close",this._closeCode,this._closeMessage)):this.emit("close",this._closeCode,this._closeMessage)}close(e,t){if(this.readyState!==b.CLOSED){if(this.readyState===b.CONNECTING){const e="WebSocket was closed before the connection was established";return x(this,this._req,e)}this.readyState!==b.CLOSING?(this.readyState=b.CLOSING,this._sender.close(e,t,!this._isServer,e=>{e||(this._closeFrameSent=!0,this._socket.writable&&(this._closeFrameReceived&&this._socket.end(),this._closeTimer=setTimeout(this._socket.destroy.bind(this._socket),y)))})):this._closeFrameSent&&this._closeFrameReceived&&this._socket.end()}}ping(e,t,s){if("function"==typeof e?(s=e,e=t=void 0):"function"==typeof t&&(s=t,t=void 0),this.readyState!==b.OPEN){const e=new Error(`WebSocket is not open: readyState ${this.readyState} `+`(${m[this.readyState]})`);if(s)return s(e);throw e}"number"==typeof e&&(e=e.toString()),void 0===t&&(t=!this._isServer),this._sender.ping(e||u.EMPTY_BUFFER,t,s)}pong(e,t,s){if("function"==typeof e?(s=e,e=t=void 0):"function"==typeof t&&(s=t,t=void 0),this.readyState!==b.OPEN){const e=new Error(`WebSocket is not open: readyState ${this.readyState} `+`(${m[this.readyState]})`);if(s)return s(e);throw e}"number"==typeof e&&(e=e.toString()),void 0===t&&(t=!this._isServer),this._sender.pong(e||u.EMPTY_BUFFER,t,s)}send(e,t,s){if("function"==typeof t&&(s=t,t={}),this.readyState!==b.OPEN){const e=new Error(`WebSocket is not open: readyState ${this.readyState} `+`(${m[this.readyState]})`);if(s)return s(e);throw e}"number"==typeof e&&(e=e.toString());const i=Object.assign({binary:"string"!=typeof e,mask:!this._isServer,compress:!0,fin:!0},t);this._extensions[l.extensionName]||(i.compress=!1),this._sender.send(e||u.EMPTY_BUFFER,i,s)}terminate(){if(this.readyState!==b.CLOSED){if(this.readyState===b.CONNECTING){const e="WebSocket was closed before the connection was established";return x(this,this._req,e)}this._socket&&(this.readyState=b.CLOSING,this._socket.destroy())}}}function w(e){return e.path=e.socketPath||e._socketPath||void 0,a.connect(e)}function S(e){return e.path=e.socketPath||e._socketPath||void 0,e.servername=e.servername||e.host,h.connect(e)}function x(e,t,s){e.readyState=b.CLOSING;const i=new Error(s);Error.captureStackTrace(i,x),t.setHeader?(t.abort(),t.once("abort",e.emitClose.bind(e)),e.emit("error",i)):(t.destroy(i),t.once("error",e.emit.bind(e,"error")),t.once("close",e.emitClose.bind(e)))}function k(e,t){const s=this[g];s._socket.removeListener("data",P),s._socket.resume(),s._closeFrameReceived=!0,s._closeMessage=t,s._closeCode=e,1005===e?s.close():s.close(e,t)}function E(){this[g]._socket.resume()}function O(e){const t=this[g];t.readyState=b.CLOSING,t._closeCode=e[u.kStatusCode],t.emit("error",e),t._socket.destroy()}function C(){this[g].emitClose()}function L(e){this[g].emit("message",e)}function T(e){const t=this[g];t.pong(e,!t._isServer,u.NOOP),t.emit("ping",e)}function B(e){this[g].emit("pong",e)}function N(){const e=this[g];this.removeListener("close",N),this.removeListener("data",P),this.removeListener("end",U),this[g]=void 0,e.readyState=b.CLOSING,e._socket.read(),e._receiver.end(),clearTimeout(e._closeTimer),e._receiver._writableState.finished||e._receiver._writableState.errorEmitted?e.emitClose():(e._receiver.on("error",C),e._receiver.on("finish",C))}function P(e){this[g]._receiver.write(e)||this.pause()}function U(){const e=this[g];e.readyState=b.CLOSING,e._receiver.end(),this.end()}function M(){const e=this[g];this.removeListener("error",M),this.on("error",u.NOOP),e&&(e.readyState=b.CLOSING,this.destroy())}m.forEach((e,t)=>{b[m[t]]=t}),["open","error","close","message"].forEach(e=>{Object.defineProperty(b.prototype,`on${e}`,{get(){const t=this.listeners(e);for(var s=0;s<t.length;s++)if(t[s]._listener)return t[s]._listener},set(t){const s=this.listeners(e);for(var i=0;i<s.length;i++)s[i]._listener&&this.removeListener(e,s[i]);this.addEventListener(e,t)}})}),b.prototype.addEventListener=f.addEventListener,b.prototype.removeEventListener=f.removeEventListener,e.exports=b},function(e,t,s){"use strict";const i=s(5),r=s(3),n=s(11),o=s(10),a=s(1),h=s(9),c=s(0),l=s(12);function f(){this.destroy()}function d(e,t,s,i){e.writable&&(s=s||n.STATUS_CODES[t],i=Object.assign({Connection:"close","Content-type":"text/html","Content-Length":Buffer.byteLength(s)},i),e.write(`HTTP/1.1 ${t} ${n.STATUS_CODES[t]}\r\n`+Object.keys(i).map(e=>`${e}: ${i[e]}`).join("\r\n")+"\r\n\r\n"+s)),e.removeListener("error",f),e.destroy()}e.exports=class extends i{constructor(e,t){if(super(),null==(e=Object.assign({maxPayload:104857600,perMessageDeflate:!1,handleProtocols:null,clientTracking:!0,verifyClient:null,noServer:!1,backlog:null,server:null,host:null,path:null,port:null},e)).port&&!e.server&&!e.noServer)throw new TypeError('One of the "port", "server", or "noServer" options must be specified');null!=e.port?(this._server=n.createServer((e,t)=>{const s=n.STATUS_CODES[426];t.writeHead(426,{"Content-Length":s.length,"Content-Type":"text/plain"}),t.end(s)}),this._server.listen(e.port,e.host,e.backlog,t)):e.server&&(this._server=e.server),this._server&&(this._removeListeners=function(e,t){for(const s of Object.keys(t))e.on(s,t[s]);return function(){for(const s of Object.keys(t))e.removeListener(s,t[s])}}(this._server,{listening:this.emit.bind(this,"listening"),error:this.emit.bind(this,"error"),upgrade:(e,t,s)=>{this.handleUpgrade(e,t,s,t=>{this.emit("connection",t,e)})}})),!0===e.perMessageDeflate&&(e.perMessageDeflate={}),e.clientTracking&&(this.clients=new Set),this.options=e}address(){if(this.options.noServer)throw new Error('The server is operating in "noServer" mode');return this._server?this._server.address():null}close(e){if(this.clients)for(const e of this.clients)e.terminate();const t=this._server;if(t&&(this._removeListeners(),this._removeListeners=this._server=null,null!=this.options.port))return t.close(e);e&&e()}shouldHandle(e){return!this.options.path||o.parse(e.url).pathname===this.options.path}handleUpgrade(e,t,s,i){t.on("error",f);const r=+e.headers["sec-websocket-version"],n={};if("GET"!==e.method||"websocket"!==e.headers.upgrade.toLowerCase()||!e.headers["sec-websocket-key"]||8!==r&&13!==r||!this.shouldHandle(e))return d(t,400);if(this.options.perMessageDeflate){const s=new a(this.options.perMessageDeflate,!0,this.options.maxPayload);try{const i=h.parse(e.headers["sec-websocket-extensions"]);i[a.extensionName]&&(s.accept(i[a.extensionName]),n[a.extensionName]=s)}catch(e){return d(t,400)}}if(this.options.verifyClient){const o={origin:e.headers[`${8===r?"sec-websocket-origin":"origin"}`],secure:!(!e.connection.authorized&&!e.connection.encrypted),req:e};if(2===this.options.verifyClient.length)return void this.options.verifyClient(o,(r,o,a,h)=>{if(!r)return d(t,o||401,a,h);this.completeUpgrade(n,e,t,s,i)});if(!this.options.verifyClient(o))return d(t,401)}this.completeUpgrade(n,e,t,s,i)}completeUpgrade(e,t,s,i,n){if(!s.readable||!s.writable)return s.destroy();const o=["HTTP/1.1 101 Switching Protocols","Upgrade: websocket","Connection: Upgrade",`Sec-WebSocket-Accept: ${r.createHash("sha1").update(t.headers["sec-websocket-key"]+c.GUID,"binary").digest("base64")}`],d=new l(null);var u=t.headers["sec-websocket-protocol"];if(u&&(u=u.trim().split(/ *, */),(u=this.options.handleProtocols?this.options.handleProtocols(u,t):u[0])&&(o.push(`Sec-WebSocket-Protocol: ${u}`),d.protocol=u)),e[a.extensionName]){const t=e[a.extensionName].params,s=h.format({[a.extensionName]:[t]});o.push(`Sec-WebSocket-Extensions: ${s}`),d._extensions=e}this.emit("headers",o,t),s.write(o.concat("\r\n").join("\r\n")),s.removeListener("error",f),d.setSocket(s,i,this.options.maxPayload),this.clients&&(this.clients.add(d),d.on("close",()=>this.clients.delete(d))),n(d)}}},function(e,t){e.exports=require("stream")},function(e,t,s){"use strict";class i{constructor(e,t){this.target=t,this.type=e}}class r extends i{constructor(e,t){super("message",t),this.data=e}}class n extends i{constructor(e,t,s){super("close",s),this.wasClean=s._closeFrameReceived&&s._closeFrameSent,this.reason=t,this.code=e}}class o extends i{constructor(e){super("open",e)}}class a extends i{constructor(e,t){super("error",t),this.message=e.message,this.error=e}}const h={addEventListener(e,t){function s(e){t.call(this,new r(e,this))}function i(e,s){t.call(this,new n(e,s,this))}function h(e){t.call(this,new a(e,this))}function c(){t.call(this,new o(this))}"function"==typeof t&&("message"===e?(s._listener=t,this.on(e,s)):"close"===e?(i._listener=t,this.on(e,i)):"error"===e?(h._listener=t,this.on(e,h)):"open"===e?(c._listener=t,this.on(e,c)):this.on(e,t))},removeEventListener(e,t){const s=this.listeners(e);for(var i=0;i<s.length;i++)s[i]!==t&&s[i]._listener!==t||this.removeListener(e,s[i])}};e.exports=h},function(e,t){e.exports=require("zlib")},function(e,t,s){"use strict";function i(e){if(!(this instanceof i))return new i(e);e=e||{},this.concurrency=e.concurrency||1/0,this.pending=0,this.jobs=[],this.cbs=[],this._done=function(){this.pending--,this._run()}.bind(this)}["push","unshift","splice"].forEach(function(e){i.prototype[e]=function(){var t=Array.prototype[e].apply(this.jobs,arguments);return this._run(),t}}),Object.defineProperty(i.prototype,"length",{get:function(){return this.pending+this.jobs.length}}),i.prototype._run=function(){if(this.pending!==this.concurrency){if(this.jobs.length){var e=this.jobs.shift();this.pending++,e(this._done),this._run()}if(0===this.pending)for(;0!==this.cbs.length;){var t=this.cbs.pop();process.nextTick(t)}}},i.prototype.onDone=function(e){"function"==typeof e&&(this.cbs.push(e),this._run())},e.exports=i},function(e,t){e.exports=require("tls")},function(e,t){e.exports=require("net")},function(e,t){e.exports=require("https")},function(e,t){e.exports=require("dgram")},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var s=0;s<t.length;s++){var i=t[s];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,s,i){return s&&e(t.prototype,s),i&&e(t,i),t}}();var r=s(5),n=(s(21),s(4),function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e.wsServer=null,e.wsPort=9581,e.wsClient=null,e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r),i(t,[{key:"startWSServer",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.wsPort;return new Promise(function(i,r){var n=s(4),o=void 0;try{o=new n.Server({port:t},function(){console.log("[TAUCOMM] WebSocket server started")})}catch(e){r(e)}o.on("listening",function(){e.wsServer=o,i(e)}),o.on("error",function(e){console.error("[TAUCOMM] error",e)}),o.on("connection",function(t){t.on("message",function(t){console.log("[TAUCOMM] got message",t);var s=JSON.parse(t.toString());e.send(s.event,s.data).then(function(){console.log("[TAUCOMM] send ok")}).catch(function(e){console.error("[TAUCOMM] send error",e)})})})})}},{key:"start",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return new Promise(function(i,r){if(t){var n=s(4),o=void 0;try{o=new n("ws://localhost:"+e.wsPort)}catch(e){r(error)}o.on("open",function(){i(e)}),o.on("error",function(e){console.error("[TAUCOMM] error",e)}),o.on("message",function(t){var s=JSON.parse(t.toString("utf8"));e.emmit(s.event,s)}),e.wsClient=o}else e.startWSServer().then(function(t){i(e)}).catch(function(e){console.error(e)})})}},{key:"send",value:function(e,t){var s=this,i=JSON.stringify({event:e,data:t});return new Promise(function(e,t){if(s.wsClient)s.wsClient.send(i,function(i){i?t(i):e(s)});else{var r=[];s.wsServer.clients.forEach(function(e){r.push(new Promise(function(t,s){e.send(i,function(e){e?s(e):t()})}))}),Promise.all(r).then(function(){e(s)}).catch(function(e){t(e)})}})}}]),t}());t.default=n}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,