!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.TComm=e():t.TComm=e()}(window,function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=17)}([function(t,e,n){"use strict";var r=n(8)();t.exports=function(t){return t!==r&&null!==t}},function(t,e,n){"use strict";t.exports=function(t){if("function"!=typeof t)throw new TypeError(t+" is not a function");return t}},function(t,e,n){"use strict";var r=String.prototype.indexOf;t.exports=function(t){return r.call(this,t,arguments[1])>-1}},function(t,e,n){"use strict";var r="razdwatrzy";t.exports=function(){return"function"==typeof r.contains&&(!0===r.contains("dwa")&&!1===r.contains("foo"))}},function(t,e,n){"use strict";t.exports=n(3)()?String.prototype.contains:n(2)},function(t,e,n){"use strict";t.exports=function(t){return"function"==typeof t}},function(t,e,n){"use strict";var r=n(0),o=Array.prototype.forEach,i=Object.create;t.exports=function(t){var e=i(null);return o.call(arguments,function(t){r(t)&&function(t,e){var n;for(n in t)e[n]=t[n]}(Object(t),e)}),e}},function(t,e,n){"use strict";var r=n(0);t.exports=function(t){if(!r(t))throw new TypeError("Cannot use null or undefined");return t}},function(t,e,n){"use strict";t.exports=function(){}},function(t,e,n){"use strict";var r=n(0),o=Object.keys;t.exports=function(t){return o(r(t)?Object(t):t)}},function(t,e,n){"use strict";t.exports=function(){try{return Object.keys("primitive"),!0}catch(t){return!1}}},function(t,e,n){"use strict";t.exports=n(10)()?Object.keys:n(9)},function(t,e,n){"use strict";var r=n(11),o=n(7),i=Math.max;t.exports=function(t,e){var n,c,u,s=i(arguments.length,2);for(t=Object(o(t)),u=function(r){try{t[r]=e[r]}catch(t){n||(n=t)}},c=1;c<s;++c)e=arguments[c],r(e).forEach(u);if(void 0!==n)throw n;return t}},function(t,e,n){"use strict";t.exports=function(){var t,e=Object.assign;return"function"==typeof e&&(e(t={foo:"raz"},{bar:"dwa"},{trzy:"trzy"}),t.foo+t.bar+t.trzy==="razdwatrzy")}},function(t,e,n){"use strict";t.exports=n(13)()?Object.assign:n(12)},function(t,e,n){"use strict";var r=n(14),o=n(6),i=n(5),c=n(4);(t.exports=function(t,e){var n,i,u,s,f;return arguments.length<2||"string"!=typeof t?(s=e,e=t,t=null):s=arguments[2],null==t?(n=u=!0,i=!1):(n=c.call(t,"c"),i=c.call(t,"e"),u=c.call(t,"w")),f={value:e,configurable:n,enumerable:i,writable:u},s?r(o(s),f):f}).gs=function(t,e,n){var u,s,f,a;return"string"!=typeof t?(f=n,n=e,e=t,t=null):f=arguments[3],null==e?e=void 0:i(e)?null==n?n=void 0:i(n)||(f=n,n=void 0):(f=e,e=n=void 0),null==t?(u=!0,s=!1):(u=c.call(t,"c"),s=c.call(t,"e")),a={get:e,set:n,configurable:u,enumerable:s},f?r(o(f),a):a}},function(t,e,n){"use strict";var r,o,i,c,u,s,f,a=n(15),l=n(1),p=Function.prototype.apply,y=Function.prototype.call,h=Object.create,d=Object.defineProperty,b=Object.defineProperties,v=Object.prototype.hasOwnProperty,_={configurable:!0,enumerable:!1,writable:!0};u={on:r=function(t,e){var n;return l(e),v.call(this,"__ee__")?n=this.__ee__:(n=_.value=h(null),d(this,"__ee__",_),_.value=null),n[t]?"object"==typeof n[t]?n[t].push(e):n[t]=[n[t],e]:n[t]=e,this},once:o=function(t,e){var n,o;return l(e),o=this,r.call(this,t,n=function(){i.call(o,t,n),p.call(e,this,arguments)}),n.__eeOnceListener__=e,this},off:i=function(t,e){var n,r,o,i;if(l(e),!v.call(this,"__ee__"))return this;if(!(n=this.__ee__)[t])return this;if("object"==typeof(r=n[t]))for(i=0;o=r[i];++i)o!==e&&o.__eeOnceListener__!==e||(2===r.length?n[t]=r[i?0:1]:r.splice(i,1));else r!==e&&r.__eeOnceListener__!==e||delete n[t];return this},emit:c=function(t){var e,n,r,o,i;if(v.call(this,"__ee__")&&(o=this.__ee__[t]))if("object"==typeof o){for(n=arguments.length,i=new Array(n-1),e=1;e<n;++e)i[e-1]=arguments[e];for(o=o.slice(),e=0;r=o[e];++e)p.call(r,this,i)}else switch(arguments.length){case 1:y.call(o,this);break;case 2:y.call(o,this,arguments[1]);break;case 3:y.call(o,this,arguments[1],arguments[2]);break;default:for(n=arguments.length,i=new Array(n-1),e=1;e<n;++e)i[e-1]=arguments[e];p.call(o,this,i)}}},s={on:a(r),once:a(o),off:a(i),emit:a(c)},f=b({},s),t.exports=e=function(t){return null==t?h(f):b(Object(t),s)},e.methods=u},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();var o=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(n(16)).default,i=function(){function t(){if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),o(this),this.confs=[],this.wsClients=[],"undefined"!=typeof window&&void 0!==window.TAUCOMM_HOSTS){var e=window.TAUCOMM_HOSTS;Array.isArray(e)?this.confs=this.confs.concat(e):this.confs.push(e)}}return r(t,[{key:"start",value:function(){var t=this,e=[];return this.confs.forEach(function(n){e.push(new Promise(function(e,r){var o=null;try{o=new WebSocket("ws://"+n)}catch(t){consol.error(t)}o.onopen=function(){e(o)},o.onmessage=function(e){var n=JSON.parse(e.data.toString("utf8"));t.emit(n.event,n.data)},o.onerror=function(t){console.error(t),t.target instanceof WebSocket&&t.target.readyState>=2&&e(o)}}))}),new Promise(function(n,r){Promise.all(e).then(function(e){t.wsClients=[],e.forEach(function(e){e instanceof WebSocket&&e.readyState<2&&t.wsClients.push(e)}),t.wsClients.length>0?n(t):r("no active cliens available")}).catch(function(t){r(t)})})}},{key:"send",value:function(t,e){var n=JSON.stringify({event:t,data:e});console.log("sending",n),this.wsClients.forEach(function(t){t.send(n)})}}]),t}();e.default=i}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,